/*
 * Copyright (C) 2009-2011 RtcNbClient Team (http://rtcnbclient.wmi.amu.edu.pl/)
 *
 * This file is part of RtcNbClient.
 *
 * RtcNbClient is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RtcNbClient is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RtcNbClient. If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.amu.wmi.kino.rtc.client.connections.wizards;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Hrabia Quak Metzger
 */
public class UsernamePanel extends javax.swing.JPanel implements DocumentListener {
    private static final long serialVersionUID = 3456165756L;

    /** Creates new form UsernamePanel */
    public UsernamePanel() {
        initComponents();
        passwordField.getDocument().addDocumentListener(this);
        userIDField.getDocument().addDocumentListener(this);
        
    }

    public String getPassword() {
        String password = String.valueOf(passwordField.getPassword());
        if (password == null) {
            password = "";
        }
        return String.valueOf(password);
    }

    public void setPassword(String pass) {
        passwordField.setText(pass);
    }

    public String getUserID() {
        String userId = userIDField.getText();
        if (userId == null) {
            userId = "";
        }
        return userId;
    }

    public void setUserID(String userId) {
        userIDField.setText(userId);
    }
    private final Set<AuthOptionsListener> listeners = Collections.synchronizedSet(new HashSet<AuthOptionsListener>());

    public void addListener(AuthOptionsListener l) {
        listeners.add(l);
    }

    public void removeListener(AuthOptionsListener l) {
        listeners.remove(l);
    }

    protected void fireChange() {
        synchronized (listeners) {
            for (AuthOptionsListener l : listeners) {
                l.panelChanged();
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userIDLabel = new javax.swing.JLabel();
        userIDField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();

        userIDLabel.setText(org.openide.util.NbBundle.getMessage(UsernamePanel.class, "UsernamePanel.userIDLabel.text")); // NOI18N

        userIDField.setText(org.openide.util.NbBundle.getMessage(UsernamePanel.class, "UsernamePanel.userIDField.text")); // NOI18N

        passwordLabel.setText(org.openide.util.NbBundle.getMessage(UsernamePanel.class, "UsernamePanel.passwordLabel.text")); // NOI18N

        passwordField.setText(org.openide.util.NbBundle.getMessage(UsernamePanel.class, "UsernamePanel.passwordField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userIDLabel)
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(userIDField)
                    .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userIDLabel)
                    .addComponent(userIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField userIDField;
    private javax.swing.JLabel userIDLabel;
    // End of variables declaration//GEN-END:variables

    public void insertUpdate(DocumentEvent e) {
        fireChange();
    }

    public void removeUpdate(DocumentEvent e) {
        fireChange();
    }

    public void changedUpdate(DocumentEvent e) {
        fireChange();
    }
}
