/*
 * Copyright (C) 2009-2011 RtcNbClient Team (http://rtcnbclient.wmi.amu.edu.pl/)
 *
 * This file is part of RtcNbClient.
 *
 * RtcNbClient is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RtcNbClient is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RtcNbClient. If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.amu.wmi.kino.rtc.client.connections.wizards;

import java.io.File;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Hrabia Quak Metzger
 */
public class SSLPanel extends javax.swing.JPanel implements DocumentListener{
    private static final long serialVersionUID = 16542134L;

    /** Creates new form SSLPanel */
    public SSLPanel() {
        initComponents();
        passwordField.getDocument().addDocumentListener(this);
        JTextComponent txt = (JTextComponent) certFileCombo.getEditor().getEditorComponent();
        txt.getDocument().addDocumentListener(this);
    }

    public String getCertPassword() {
        String password = String.valueOf(passwordField.getPassword());
        if (password == null) {
            password = "";
        }
        return String.valueOf(password);
    }

    public void setCertPassword(String pass) {
        passwordField.setText(pass);
    }

    public String getCertFile() {
        String filePath = certFileCombo.getEditor().getItem().toString();
        if (filePath == null) {
            filePath = "";
        }
        return filePath;
    }

    public void setCertFile(String filePath) {
        certFileCombo.setSelectedItem(filePath);;
    }
    private final Set<AuthOptionsListener> listeners = Collections.synchronizedSet(new HashSet<AuthOptionsListener>());

    public void addListener(AuthOptionsListener l) {
        listeners.add(l);
    }

    public void removeListener(AuthOptionsListener l) {
        listeners.remove(l);
    }

    protected void fireChange() {
        synchronized (listeners) {
            for (AuthOptionsListener l : listeners) {
                l.panelChanged();
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        certBrowser = new javax.swing.JFileChooser();
        certFileLabel = new javax.swing.JLabel();
        certFileCombo = new javax.swing.JComboBox();
        browseButton = new javax.swing.JButton();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();

        certFileLabel.setText(org.openide.util.NbBundle.getMessage(SSLPanel.class, "SSLPanel.certFileLabel.text")); // NOI18N

        certFileCombo.setEditable(true);

        browseButton.setText(org.openide.util.NbBundle.getMessage(SSLPanel.class, "SSLPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        passwordLabel.setText(org.openide.util.NbBundle.getMessage(SSLPanel.class, "SSLPanel.passwordLabel.text")); // NOI18N

        passwordField.setText(org.openide.util.NbBundle.getMessage(SSLPanel.class, "SSLPanel.passwordField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(certFileLabel)
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(certFileCombo, 0, 232, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton))
                    .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(certFileLabel)
                    .addComponent(browseButton)
                    .addComponent(certFileCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        int result = certBrowser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File file = certBrowser.getSelectedFile();
            setCertFile(file.getPath());
        }
    }//GEN-LAST:event_browseButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JFileChooser certBrowser;
    private javax.swing.JComboBox certFileCombo;
    private javax.swing.JLabel certFileLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    // End of variables declaration//GEN-END:variables

    public void insertUpdate(DocumentEvent e) {
        fireChange();
    }

    public void removeUpdate(DocumentEvent e) {
        fireChange();
    }

    public void changedUpdate(DocumentEvent e) {
        fireChange();
    }
}
