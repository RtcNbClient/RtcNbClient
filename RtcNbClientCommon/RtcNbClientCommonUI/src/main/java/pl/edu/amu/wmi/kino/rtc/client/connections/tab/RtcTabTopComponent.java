/*
 * Copyright (C) 2009-2011 RtcNbClient Team (http://rtcnbclient.wmi.amu.edu.pl/)
 *
 * This file is part of RtcNbClient.
 *
 * RtcNbClient is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RtcNbClient is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RtcNbClient. If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.amu.wmi.kino.rtc.client.connections.tab;

import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.HelpCtx;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;
//TODO: javadoc: lack of author

/**
 * Tab window which displies list of ActiveProjectAreas.
 * @see RtcActiveProjectAreasNode
 * @see TopComponent
 */
public final class RtcTabTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static RtcTabTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "pl/edu/amu/wmi/kino/rtc/client/connection/topcomponents/icon.png";
    private static final String PREFERRED_ID = "RtcTabTopComponent";
    private ExplorerManager explorerManager;
//TODO: javadoc: needed detailed info about components setting

    /**
     * Class constructor which:
     * <ul>
     * <li>- set TabTopComponent name</li>
     * <li>- set TabTopComponent tool tip message</li>
     * <li>- set TabTopComponent icon</li>
     * <li>- set root for this TabTopComponent which is <code>RtcActiveProjectAreasNode</code></li>
     * </ul>
     *
     * @see RtcActiveProjectAreasNode
     */
    private RtcTabTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(RtcTabTopComponent.class, "CTL_RtcTabTopComponent"));
        setToolTipText(NbBundle.getMessage(RtcTabTopComponent.class, "HINT_RtcTabTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        explorerManager = new ExplorerManager();
        ActionMap map = this.getActionMap();
        map.put("delete", ExplorerUtils.actionDelete(explorerManager, true));
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));

        ((BeanTreeView) jScrollPane1).setRootVisible(false);
        explorerManager.setRootContext(new RtcTabRootNode());
        setFocusable(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
//TODO: javadoc: lack of return

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     * @return
     */
    public static synchronized RtcTabTopComponent getDefault() {
        if (instance == null) {
            instance = new RtcTabTopComponent();
        }
        return instance;
    }
//TODO: javadoc: lack of return

    /**
     * Obtain the RtcTabTopComponent instance. Never call {@link #getDefault} directly!
     * @return
     */
    public static synchronized RtcTabTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(RtcTabTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof RtcTabTopComponent) {
            return (RtcTabTopComponent) win;
        }
        Logger.getLogger(RtcTabTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    /**
     * Gets ExplorerManager object linked to this TabTopComponents
     * @return ExplorerManager
     * @see ExplorerManager
     */
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return RtcTabTopComponent.getDefault();
        }
    }

    /**
     *
     * @return the help context
     */
    @Override
    public HelpCtx getHelpCtx() {
        if (explorerManager.getSelectedNodes() != null) {
            return explorerManager.getSelectedNodes()[0].getHelpCtx();
        }
        return new HelpCtx(RtcTabTopComponent.class);
    }
}
