/*
 * Copyright (C) 2009-2011 RtcNbClient Team (http://rtcnbclient.wmi.amu.edu.pl/)
 *
 * This file is part of RtcNbClient.
 *
 * RtcNbClient is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RtcNbClient is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RtcNbClient. If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.amu.wmi.kino.rtc.client.connections.wizards;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Hrabia Quak Metzger
 */
public class SmartCardPanel extends javax.swing.JPanel implements ListSelectionListener {
    private static final long serialVersionUID = 3251456457L;

    /** Creates new form SmartCardPanel */
    public SmartCardPanel() {
        initComponents();
        certList.addListSelectionListener(this);
    }

    public String getCertificate() {
        if (certList.getSelectedValue() != null) {
            String certificate = certList.getSelectedValue().toString();
            if (certificate == null) {
                certificate = "";
            }
            return certificate;
        } else {
            return null;
        }

    }

    public void setCertificate(String[] options, String selected) {
        if (options != null) {
            certList.setListData(options);
        }
        certList.setSelectedValue(selected, true);
    }
    private final Set<AuthOptionsListener> listeners = Collections.synchronizedSet(new HashSet<AuthOptionsListener>());

    public void addListener(AuthOptionsListener l) {
        listeners.add(l);
    }

    public void removeListener(AuthOptionsListener l) {
        listeners.remove(l);
    }

    protected void fireChange() {
        synchronized (listeners) {
            for (AuthOptionsListener l : listeners) {
                l.panelChanged();
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectLabel = new javax.swing.JLabel();
        certListScrollPane = new javax.swing.JScrollPane();
        certList = new javax.swing.JList();

        selectLabel.setText(org.openide.util.NbBundle.getMessage(SmartCardPanel.class, "SmartCardPanel.selectLabel.text")); // NOI18N

        certList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        certListScrollPane.setViewportView(certList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(certListScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(selectLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(selectLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(certListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList certList;
    private javax.swing.JScrollPane certListScrollPane;
    private javax.swing.JLabel selectLabel;
    // End of variables declaration//GEN-END:variables

    public void valueChanged(ListSelectionEvent e) {
        fireChange();
    }
}
