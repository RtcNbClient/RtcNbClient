/*
 * Copyright (C) 2009-2011 RtcNbClient Team (http://rtcnbclient.wmi.amu.edu.pl/)
 *
 * This file is part of RtcNbClient.
 *
 * RtcNbClient is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RtcNbClient is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RtcNbClient. If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.editors.custom;

import java.awt.Desktop;
import java.beans.PropertyEditor;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;
import pl.edu.amu.wmi.kino.rtc.client.RtcLogger;
import pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.editors.RtcAttachmentsEditor;
import pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.types.RtcAttachment;

/**
 *
 * @author Tomasz Adamski
 */
public class RtcAttachmentsExtendedPanel extends javax.swing.JPanel {

	private static final long serialVersionUID = -4684229391687419398L;
	private List<RtcAttachment> attachmentList;
    private RtcAttachmentsEditor pe;

    /** Creates new form RtcAttachmentsExtenderPanel */
    public RtcAttachmentsExtendedPanel(PropertyEditor pe) {
        initComponents();
        this.attachmentList = (List<RtcAttachment>) pe.getValue();

        this.pe = (RtcAttachmentsEditor) pe;
        this.jTable1.setModel(new AttachmentsTableModel(attachmentList));
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                if (lsm.equals(jTable1.getSelectionModel())) {
                    if (lsm.isSelectionEmpty()) {
                        SaveAsButton.setEnabled(false);
                        openButton.setEnabled(false);
                        deleteFileButton.setEnabled(false);
                        renameFileButton.setEnabled(false);
                    } else {
                        SaveAsButton.setEnabled(true);
                        openButton.setEnabled(true);
                        deleteFileButton.setEnabled(true);
                        renameFileButton.setEnabled(true);
                    }
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        SaveAsButton = new javax.swing.JButton();
        renameFileButton = new javax.swing.JButton();
        addFileButton = new javax.swing.JButton();
        deleteFileButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(469, 200));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(452, 200));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1);

        jPanel1.setMaximumSize(new java.awt.Dimension(121, 32767));
        jPanel1.setMinimumSize(new java.awt.Dimension(121, 0));

        SaveAsButton.setText(org.openide.util.NbBundle.getMessage(RtcAttachmentsExtendedPanel.class, "RtcAttachmentsExtendedPanel.SaveAsButton.text")); // NOI18N
        SaveAsButton.setEnabled(false);
        SaveAsButton.setPreferredSize(new java.awt.Dimension(100, 24));
        SaveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsButtonActionPerformed(evt);
            }
        });

        renameFileButton.setText(org.openide.util.NbBundle.getMessage(RtcAttachmentsExtendedPanel.class, "RtcAttachmentsExtendedPanel.renameFileButton.text")); // NOI18N
        renameFileButton.setEnabled(false);
        renameFileButton.setPreferredSize(new java.awt.Dimension(100, 24));
        renameFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameFileButtonActionPerformed(evt);
            }
        });

        addFileButton.setText(org.openide.util.NbBundle.getMessage(RtcAttachmentsExtendedPanel.class, "RtcAttachmentsExtendedPanel.addFileButton.text")); // NOI18N
        addFileButton.setPreferredSize(new java.awt.Dimension(100, 24));
        addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileButtonActionPerformed(evt);
            }
        });

        deleteFileButton.setText(org.openide.util.NbBundle.getMessage(RtcAttachmentsExtendedPanel.class, "RtcAttachmentsExtendedPanel.deleteFileButton.text")); // NOI18N
        deleteFileButton.setEnabled(false);
        deleteFileButton.setPreferredSize(new java.awt.Dimension(100, 24));
        deleteFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFileButtonActionPerformed(evt);
            }
        });

        openButton.setText(org.openide.util.NbBundle.getMessage(RtcAttachmentsExtendedPanel.class, "RtcAttachmentsExtendedPanel.openButton.text")); // NOI18N
        openButton.setEnabled(false);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(openButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addFileButton, 0, 0, Short.MAX_VALUE)
                    .addComponent(deleteFileButton, 0, 0, Short.MAX_VALUE)
                    .addComponent(SaveAsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(renameFileButton, 0, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(openButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(renameFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaveAsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1);
    }// </editor-fold>                        

    private void deleteFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFileButtonActionPerformed
        if (jTable1.getSelectedRow() != -1) {
            RtcAttachment toDelete = null;
            int result = JOptionPane.showConfirmDialog(this,
                    NbBundle.getMessage(RtcAttachmentsExtendedPanel.class, "DoYouReallyWantToDeleteThatFile.name"),
                    NbBundle.getMessage(RtcAttachmentsExtendedPanel.class, "DoYouReallyWantToDeleteThatFileTitle.name"),
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                toDelete = attachmentList.remove(jTable1.getSelectedRow());
                pe.setValue(attachmentList);
                jTable1.setModel(new AttachmentsTableModel(attachmentList));
                pe.firePropertyChange();

            }
        }
    }//GEN-LAST:event_deleteFileButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        if (jTable1.getSelectedRow() != -1) {

            RequestProcessor.getDefault().post(new Runnable() {

                @Override
                public void run() {
                    RtcAttachment toOpen = null;
                    try {
                        toOpen = attachmentList.get(jTable1.getSelectedRow());
                    } finally {
                        ProgressHandle ph = ProgressHandleFactory.createHandle(NbBundle.getMessage(RtcApprovalsExtendedPanel.class, "OpeningFileProgressBar.name"));
                        try {
                            ph.start();
                            ph.switchToIndeterminate();
                            Desktop.getDesktop().open(toOpen.getFile());
                            ph.finish();
                        } catch (IOException ex) {
                            RtcLogger.getLogger(RtcAttachmentsExtendedPanel.class)
                                    .log(Level.WARNING, ex.getLocalizedMessage(), ex);
                        } finally {
                            ph.finish();

                        }
                    }
                }
            });
        }

    }//GEN-LAST:event_openButtonActionPerformed

    private void SaveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsButtonActionPerformed
        if (jTable1.getSelectedRow() != -1) {
            final RtcAttachment attachment;

            attachment = attachmentList.get(jTable1.getSelectedRow());
            final JFileChooser fileChooser = new JFileChooser();
            fileChooser.setSelectedFile(new File(attachment.getName()));
            int result = fileChooser.showSaveDialog(this);

            if (result == JFileChooser.APPROVE_OPTION) {

                RequestProcessor.getDefault().post(new Runnable() {

                    @Override
                    public void run() {
                        try {

                            ProgressHandle ph = ProgressHandleFactory.createHandle(NbBundle.getMessage(RtcApprovalsExtendedPanel.class, "DownloadingFileProgressBar.name"));
                            ph.start();
                            ph.switchToIndeterminate();
                            File f1 = attachment.getFile();
                            ph.finish();
                            File f2 = fileChooser.getSelectedFile();
                            InputStream in = new FileInputStream(f1);
                            //For Overwrite the file.
                            OutputStream out = new FileOutputStream(f2);

                            byte[] buf = new byte[1024];
                            int len;
                            while ((len = in.read(buf)) > 0) {
                                out.write(buf, 0, len);
                            }
                            in.close();
                            out.close();
                        } catch (IOException ex) {
                            RtcLogger.getLogger(RtcAttachmentsExtendedPanel.class)
                                    .log(Level.SEVERE, ex.getLocalizedMessage(), ex);
                        }

                    }
                });



            }


        }
    }//GEN-LAST:event_SaveAsButtonActionPerformed

    private void addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileButtonActionPerformed
        final JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {

            RequestProcessor.getDefault().post(new Runnable() {

                @Override
                public void run() {
                   // try {

                        ProgressHandle ph = ProgressHandleFactory.createHandle(NbBundle.getMessage(RtcApprovalsExtendedPanel.class, "UploadingFileProgressBar.name"));
                        ph.start();
                        ph.switchToIndeterminate();
                        File f1 = fileChooser.getSelectedFile();
                        //attachments.addAttachment(f1);
                        pe.setValue(attachmentList);
                        jTable1.setModel(new AttachmentsTableModel((List<RtcAttachment>) pe.getValue()));
                        ph.finish();
                        pe.firePropertyChange();
//                    } catch (IOException e) {
//                        RtcLogger.getLogger().severe(e.getLocalizedMessage());
//                    }

                }
            });
        }
    }//GEN-LAST:event_addFileButtonActionPerformed

    private void renameFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameFileButtonActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            String newName = JOptionPane.showInputDialog(this, "Message", attachmentList.get(selectedRow).getName());
            attachmentList.get(selectedRow).setName(newName);
            pe.setValue(attachmentList);
        }
    }//GEN-LAST:event_renameFileButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SaveAsButton;
    private javax.swing.JButton addFileButton;
    private javax.swing.JButton deleteFileButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton openButton;
    private javax.swing.JButton renameFileButton;
    // End of variables declaration//GEN-END:variables

    private class AttachmentsTableModel implements TableModel {

        private List<RtcAttachment> attachmentsList = null;

        private AttachmentsTableModel(List<RtcAttachment> attachments) {

            this.attachmentsList = attachments;

        }

        @Override
        public int getRowCount() {
            return this.attachmentsList.size();
        }

        @Override
        public int getColumnCount() {
            return 6;
        }

        @Override
        public String getColumnName(int columnIndex) {
            ResourceBundle bundle = NbBundle.getBundle(RtcAttachmentsExtendedPanel.class);
            switch (columnIndex) {
                case 0:
                    return bundle.getString("AttachmentColumnId.name");
                case 1:
                    return bundle.getString("AttachmentColumnFilename.name");
                case 2:
                    return bundle.getString("AttachmentColumnDate.name");
                case 3:
                    return bundle.getString("AttachmentColumnCreatorName.name");
                case 4:
                    return bundle.getString("AttachmentColumnFilesize.name");
                case 5:
                    return bundle.getString("AttachmentColumnFiletype.name");
                default:
                    return null;
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return String.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {

            RtcAttachment attachment = attachmentsList.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return Integer.toString(attachment.getId());
                case 1:
                    return attachment.getName();
                case 2:
                    return attachment.getCreationDate().toString();
                case 3:
                    return attachment.getCreator().getName();
                case 4:
                    return String.valueOf(attachment.getSize() / 1024) + " kB";
                case 5:
                    return attachment.getDescription();
            }

            return "";
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        @Override
        public void addTableModelListener(TableModelListener l) {
            listenerList.add(TableModelListener.class, l);
        }

        @Override
        public void removeTableModelListener(TableModelListener l) {
            listenerList.remove(TableModelListener.class, l);
        }

        public RtcAttachment getAttachment(int row) {
            return attachmentsList.get(row);
        }
    }
}
