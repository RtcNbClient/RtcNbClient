/*
 * Copyright (C) 2009-2011 RtcNbClient Team (http://rtcnbclient.wmi.amu.edu.pl/)
 *
 * This file is part of RtcNbClient.
 *
 * RtcNbClient is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RtcNbClient is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RtcNbClient. If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.editors.custom;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyEditorSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.util.List;
import javax.swing.JList;
import javax.swing.ListSelectionModel;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.explorer.propertysheet.PropertyEnv;
import pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.editors.RtcSubscriptionsEditor;
import pl.edu.amu.wmi.kino.rtc.client.facade.api.common.contributor.Contributor;

/**
 *
 * @author Dawid Holewa
 */
public class RtcSubscriptionsExtendedEditor extends javax.swing.JPanel implements VetoableChangeListener {

	private static final long serialVersionUID = -7661703417817422313L;
	PropertyEditorSupport editor;
    List<Contributor> values;
    List<Contributor> possibleValues;
    private PropertyEnv env;

    /** Creates new form RtcSubscriptionsExtendedEditor */
    public RtcSubscriptionsExtendedEditor(PropertyEditorSupport ed, List<Contributor> list, PropertyEnv env) {
        values = list;
        initComponents();
        editor = ed;
        if (ed instanceof RtcSubscriptionsEditor) {
            possibleValues = ((RtcSubscriptionsEditor) ed).getPossibleValuesOfContributors();
        }
        this.env = env;
        this.env.setState(PropertyEnv.STATE_NEEDS_VALIDATION);
        this.env.addVetoableChangeListener(this);
        jList1.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }

    public List<Contributor> getContributors() {
        return possibleValues;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new JList(values.toArray());
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jScrollPane1.setViewportView(jList1);

        jButton1.setText(org.openide.util.NbBundle.getMessage(RtcSubscriptionsExtendedEditor.class, "RtcSubscriptionsExtendedEditor.jButton1.text")); // NOI18N
        jButton1.setPreferredSize(new java.awt.Dimension(80, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(org.openide.util.NbBundle.getMessage(RtcSubscriptionsExtendedEditor.class, "RtcSubscriptionsExtendedEditor.jButton2.text")); // NOI18N
        jButton2.setPreferredSize(new java.awt.Dimension(80, 23));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(149, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
        );
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        RtcContributorEditorPanel panel = new RtcContributorEditorPanel(this);

        NotifyDescriptor nd = new NotifyDescriptor(panel, org.openide.util.NbBundle.getMessage(RtcApprovalsExtendedPanel.class, "RtcApprovalsExtendedPanel.editApproval.text"), NotifyDescriptor.OK_CANCEL_OPTION, NotifyDescriptor.PLAIN_MESSAGE, null, NotifyDescriptor.OK_OPTION);

        if (DialogDisplayer.getDefault().notify(nd) == NotifyDescriptor.OK_OPTION) {
            if (panel.getSelected() != null) {
                jList1.removeAll();
                for (Object object : panel.getSelected()) {
                    values.add((Contributor) object);
                }
                jList1.setListData(values.toArray());
                
            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        for (Object object : jList1.getSelectedValues()) {
            values.remove((Contributor) object);
        }
        //hack
        jList1.removeAll();
        jList1.setListData(values.toArray());
        // Problem with refreshing list.
    }//GEN-LAST:event_jButton2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {
        if (values != null) {
//            List<IContributorHandle> l = new ArrayList<IContributorHandle>();
//
//            for (Contributor rtcContributor : values) {
//                l.add(((RtcContributorImpl) rtcContributor).getContributor());
//            }
//
//            DelegatingItemList<IContributorHandle> list = new DelegatingItemList<IContributorHandle>(l, DelegatingItemList.Mode.LIST);

            editor.setValue(values);
        }
    }
}
