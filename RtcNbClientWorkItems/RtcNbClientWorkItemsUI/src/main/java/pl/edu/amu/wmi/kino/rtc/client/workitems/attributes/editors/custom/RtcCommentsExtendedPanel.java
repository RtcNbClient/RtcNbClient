/*
 * Copyright (C) 2009-2011 RtcNbClient Team (http://rtcnbclient.wmi.amu.edu.pl/)
 *
 * This file is part of RtcNbClient.
 *
 * RtcNbClient is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RtcNbClient is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RtcNbClient. If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.editors.custom;

import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.Insets;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.text.DateFormat;
import java.util.Date;
import java.util.List;

import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.border.EmptyBorder;

import org.openide.explorer.propertysheet.PropertyEnv;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

import pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.editors.RtcCommentsEditor;
import pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.types.RtcComment;
import pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.types.RtcComments;

/**
 * Extended editor for comments.
 * It is used to add comment to WorkItem.
 * @author Dawid Holewa
 */
public class RtcCommentsExtendedPanel extends javax.swing.JPanel implements VetoableChangeListener {

	private static final long serialVersionUID = -9164707026943015043L;
	private boolean edited = false;
    private PropertyEnv env;
    private RtcCommentsEditor editor;
    private List<RtcComment> comments;
    private final Lookup context;
    DefaultListModel listModel;

    
    public RtcCommentsExtendedPanel(final RtcCommentsEditor editor, PropertyEnv env, Lookup con) {
        this.context = con;
        this.env = env;
        this.env.setState(PropertyEnv.STATE_NEEDS_VALIDATION);
        this.editor = editor;
        this.comments = ((List<RtcComment>) editor.getValue());
        this.env.addVetoableChangeListener(this);

        this.listModel = new DefaultListModel();
        for (RtcComment rtcComment : comments) {
            listModel.addElement(rtcComment);
        }
        initComponents();
        ListCellRenderer renderer = new CommentJPanel();
        jList1.setCellRenderer(renderer);
    }

    @Override
    public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {
        this.editor.setValue(comments);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        newCommentTextArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList(listModel);
        jButton1 = new javax.swing.JButton();

        newCommentTextArea.setColumns(20);
        newCommentTextArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        newCommentTextArea.setRows(5);
        newCommentTextArea.setText(org.openide.util.NbBundle.getMessage(RtcCommentsExtendedPanel.class, "RtcCommentsExtendedPanel.newCommentTextArea.text")); // NOI18N
        newCommentTextArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newCommentTextAreaFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(newCommentTextArea);

        jScrollPane1.setViewportView(jList1);

        jButton1.setText(org.openide.util.NbBundle.getMessage(RtcCommentsExtendedPanel.class, "RtcCommentsExtendedPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (newCommentTextArea.getText().length() > 0 && !newCommentTextArea.getText().equalsIgnoreCase(org.openide.util.NbBundle.getMessage(RtcCommentsExtendedPanel.class, "RtcCommentsExtendedPanel.newCommentTextArea.text"))) {
            addCommentToList(newCommentTextArea.getText());
            newCommentTextArea.setText("");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void newCommentTextAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newCommentTextAreaFocusGained
        if (!edited) {
            edited = true;
            newCommentTextArea.setText("");
        }
    }//GEN-LAST:event_newCommentTextAreaFocusGained
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea newCommentTextArea;
    // End of variables declaration//GEN-END:variables

    private void addCommentToList(String text) {
        RtcComment com = context.lookup(RtcComments.class).createComment(text);
        comments.add(com);
        this.listModel.addElement(com);
    }

    /**
     * Object of this class represent one commnent.
     */
    private class CommentJPanel implements ListCellRenderer {

        private Component CommentPanel(String author, String content, Date date, int row_number) {

            JPanel mainPanel = new JPanel();
            JPanel headerPanel = new JPanel();
            JEditorPane contentTextArea = new JEditorPane();
            contentTextArea.setContentType("text/html");
            contentTextArea.setEditable(false);
            JLabel authorLabel = new JLabel(author);
            JLabel dateLabel;

            authorLabel.setFont(authorLabel.getFont().deriveFont(authorLabel.getFont().getStyle() | java.awt.Font.BOLD));
            authorLabel.setBorder(new EmptyBorder(new Insets(0, 0, 0, 0)));


            if (date == null) {
                dateLabel = new JLabel(NbBundle.getMessage(RtcCommentsExtendedPanel.class, "SaveToSendComment.name"));
            } else {
                dateLabel = new JLabel(DateFormat.getDateTimeInstance().format(date));
            }
            dateLabel.setBorder(new EmptyBorder(new Insets(0, 20, 0, 0)));

            headerPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 2, 5));
            headerPanel.add(authorLabel);
            headerPanel.setOpaque(false);
            headerPanel.add(dateLabel);

            contentTextArea.setText(content);
            contentTextArea.setBorder(new EmptyBorder(new Insets(5, 10, 5, 0)));
            contentTextArea.setOpaque(false);

            mainPanel.add(headerPanel);
            mainPanel.add(contentTextArea);
            mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
            if (row_number % 2 == 1) {
                mainPanel.setBackground(Color.WHITE);
            } else {
                mainPanel.setBackground(Color.decode("#F3F3F3"));
            }
            return mainPanel;
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            RtcComment comment = (RtcComment) value;
            return CommentPanel(comment.getCreator().getName(), comment.getContent(), comment.getCreationDate(), index);
        }
    }
}
