/*
 * Copyright (C) 2009-2011 RtcNbClient Team (http://rtcnbclient.wmi.amu.edu.pl/)
 *
 * This file is part of RtcNbClient.
 *
 * RtcNbClient is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RtcNbClient is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RtcNbClient. If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.editors.custom;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ListSelectionModel;
import org.openide.explorer.propertysheet.PropertyEnv;
import pl.edu.amu.wmi.kino.rtc.client.facade.api.common.contributor.Contributor;
import pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.editors.RtcContributorEditor;

/**
 *
 * @author Dawid Holewa
 */
public class RtcContributorEditorPanel extends javax.swing.JPanel implements VetoableChangeListener {

	private static final long serialVersionUID = -2132901993153409284L;
	RtcContributorEditor editor;
    List<Contributor> possibleValues = null;
    List<String> queryValues = new ArrayList<String>();
    List<Contributor> listValuesObjects = new ArrayList<Contributor>();
    private PropertyEnv env;

    /**
     * Special contructor which is use to connect panel with RtcContributorEditor.
     * @param ed RtcContributorEditor object
     */
    public RtcContributorEditorPanel(RtcContributorEditor ed, PropertyEnv env) {
        initComponents();
        editor = ed;
        possibleValues = editor.getPossibleValues();
        this.env = env;
        this.env.setState(PropertyEnv.STATE_NEEDS_VALIDATION);
        this.env.addVetoableChangeListener(this);
        userList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * Special constructo which ist use to connect panel with RtcApprovalsExtendedPanel.
     * @param panel RtcApprovalsExtendedPanel object
     */
    public RtcContributorEditorPanel(RtcApprovalsExtendedPanel panel) {
        initComponents();
        possibleValues = panel.getContributors();
        userList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

    }

    /**
     * Special constructo which ist use to connect panel with RtcApprovalsExtendedPanel.
     * @param panel RtcApprovalsExtendedPanel object
     */
    public RtcContributorEditorPanel(RtcSubscriptionsExtendedEditor panel) {
        initComponents();
        possibleValues = panel.getContributors();
        userList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }

    public Object[] getSelected() {
        Vector<Object> objects = new Vector<Object>();
        int[] indexes = userList.getSelectedIndices();

        for (int i : indexes) {
            objects.add(listValuesObjects.get(i));
        }
        return objects.toArray();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        buttonSearch = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        numberOfUsers = new javax.swing.JLabel();
        labelFound = new javax.swing.JLabel();
        labelSearchDescription = new javax.swing.JLabel();
        labelSearchTitle = new javax.swing.JLabel();

        userList.setModel(new javax.swing.AbstractListModel() {
			private static final long serialVersionUID = 4118604167340616384L;
			String[] strings = { org.openide.util.NbBundle.getMessage(RtcContributorEditorPanel.class, "RtcContributorEditorPanel.list.text"), " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        userList.setEnabled(false);
        jScrollPane1.setViewportView(userList);

        buttonSearch.setText(org.openide.util.NbBundle.getMessage(RtcContributorEditorPanel.class, "RtcContributorEditorPanel.buttonSearch.text")); // NOI18N
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        searchTextField.setText(org.openide.util.NbBundle.getMessage(RtcContributorEditorPanel.class, "RtcContributorEditorPanel.searchTextField.text")); // NOI18N
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });

        numberOfUsers.setText(org.openide.util.NbBundle.getMessage(RtcContributorEditorPanel.class, "RtcContributorEditorPanel.numberOfUsers.text")); // NOI18N

        labelFound.setText(org.openide.util.NbBundle.getMessage(RtcContributorEditorPanel.class, "RtcContributorEditorPanel.labelFound.text")); // NOI18N

        labelSearchDescription.setText(org.openide.util.NbBundle.getMessage(RtcContributorEditorPanel.class, "RtcContributorEditorPanel.labelSearchDescription.text")); // NOI18N

        labelSearchTitle.setText(org.openide.util.NbBundle.getMessage(RtcContributorEditorPanel.class, "RtcContributorEditorPanel.labelSearchTitle.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 704, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                        .addComponent(labelSearchTitle)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(searchTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonSearch))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(labelFound)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(numberOfUsers))
                        .addComponent(labelSearchDescription))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(labelSearchTitle)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(labelSearchDescription)
                    .addGap(7, 7, 7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonSearch))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelFound)
                        .addComponent(numberOfUsers))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                    .addContainerGap()))
        );
    }// </editor-fold>                        

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        searchUsers();
}//GEN-LAST:event_buttonSearchActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        searchUsers();
}//GEN-LAST:event_searchTextFieldActionPerformed

    private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased
        searchUsers();
    }//GEN-LAST:event_searchTextFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelFound;
    private javax.swing.JLabel labelSearchDescription;
    private javax.swing.JLabel labelSearchTitle;
    private javax.swing.JLabel numberOfUsers;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables

    public void searchUsers() {
        userList.setEnabled(true);

        String regexp_pattern = searchTextField.getText().trim().replace("*", ".*").toLowerCase();
        userList.removeAll();

        if (!regexp_pattern.contains(".*") && regexp_pattern.length() >= 1) {
            regexp_pattern += ".*";
        }
        listValuesObjects.clear();
        queryValues.clear();

        if (regexp_pattern.contentEquals(".*") || (regexp_pattern.length() < 1)) {
            for (Contributor rtcContributor : possibleValues) {
                queryValues.add(rtcContributor.getName() + "-" + rtcContributor.getUserId() + "-" + rtcContributor.getEmailAddress());
                listValuesObjects.add(rtcContributor);
            }
            userList.setListData(queryValues.toArray());
            numberOfUsers.setText("" + possibleValues.size());
        } else {

            Pattern filter = Pattern.compile(regexp_pattern);
            Matcher resoultName;
            Matcher resoultLastName = filter.matcher("");
            Matcher resoultEmail;
            Matcher resoultId;
            for (Contributor rtcContributor : possibleValues) {
                resoultName = filter.matcher(rtcContributor.getName().toLowerCase());
                String[] name = rtcContributor.getName().toLowerCase().split("\\s");
                if (name.length > 1) resoultLastName = filter.matcher(name[1]);
                resoultEmail = filter.matcher(rtcContributor.getEmailAddress().toLowerCase());
                resoultId = filter.matcher(rtcContributor.getUserId().toLowerCase());

                if (resoultName.matches() || resoultLastName.matches() || resoultEmail.matches() || resoultId.matches()) {
                    queryValues.add(rtcContributor.getName() + " - " + rtcContributor.getUserId() + " - " + rtcContributor.getEmailAddress());
                    listValuesObjects.add(rtcContributor);
                }
            }

            if (queryValues.size() > 0) {
                numberOfUsers.setText("" + queryValues.size());
                userList.setListData(queryValues.toArray());
            } else {
                numberOfUsers.setText("0");
                String[] s = {org.openide.util.NbBundle.getMessage(RtcContributorEditorPanel.class, "RtcContributorEditorPanel.notFound.text")};
                userList.setListData(s);
            }

        }
    }

    @Override
    public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {
        int value = userList.getSelectedIndex();
        if (value >= 0) {
            editor.setValue(listValuesObjects.get(value));
        }
    }
}
