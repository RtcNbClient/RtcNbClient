/*
 * Copyright (C) 2009-2011 RtcNbClient Team (http://rtcnbclient.wmi.amu.edu.pl/)
 *
 * This file is part of RtcNbClient.
 *
 * RtcNbClient is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RtcNbClient is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RtcNbClient. If not, see <http://www.gnu.org/licenses/>.
 */
package pl.edu.amu.wmi.kino.rtc.client.workitems.panels;

import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.IOException;
import javax.swing.Box;
import javax.swing.JLabel;
import org.openide.cookies.SaveCookie;
import org.openide.explorer.propertysheet.PropertyPanel;
import org.openide.util.Exceptions;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import pl.edu.amu.wmi.kino.rtc.client.workitems.RtcWorkItem;
import pl.edu.amu.wmi.kino.rtc.client.workitems.WorkItemNode;
import pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.RtcWorkItemAttribute;
import pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.RtcWorkItemAttributeSet.RtcWorkItemAttributeSection;
import pl.edu.amu.wmi.kino.rtc.client.workitems.topcomponents.RtcWorkItemTopComponent;
import pl.edu.amu.wmi.kino.rtc.client.workitems.topcomponents.RtcWorkItemTopComponent.TopComponentEvents;
import pl.edu.amu.wmi.kino.rtc.client.workitems.topcomponents.RtcWorkItemTopComponent.TopComponentListener;
import pl.edu.amu.wmi.kino.rtc.client.workitems.attributes.types.RtcWorkItemType;

/**
 *
 * @author michu
 */
public class RtcWorkItemHeaderLayout extends javax.swing.JPanel implements TopComponentListener, LookupListener, HelpCtx.Provider {

	private static final long serialVersionUID = 3990276318938050071L;
	private Lookup context;
    private RtcWorkItemTopComponent tp;
    private Lookup.Result<SaveCookie> results;

    /** Creates new form RtcWorkItemHeaderPanel
     * @param tp
     * @param sec
     * @param context
     * @param workitem
     */
    public RtcWorkItemHeaderLayout(RtcWorkItemTopComponent tp, RtcWorkItemAttributeSection sec, RtcWorkItem workitem, Lookup context) {
        initComponents();

        this.context = context;
        this.tp = tp;

        jButton1.setVisible(false);

        setOpaque(false);
        jContentPanel.setOpaque(false);

        tp.addListener(this);
        results = context.lookupResult(SaveCookie.class);
        results.addLookupListener(this);

        if (context.lookup(WorkItemNode.class).isModified()) {
            SaveButton.setEnabled(true);
        } else {
            SaveButton.setEnabled(false);
        }

        RtcWorkItemType workItemType = workitem.getType();
        jHeaderTitle.setText(workItemType.getDisplayName() + " " + workitem.getId());
        for (RtcWorkItemAttribute attr : sec) {
            if (!(attr.getAttributeId().equals("internalResolution") || attr.getAttributeId().equals("id"))) {

                JLabel label = new JLabel(attr.getAttributeDisplayName());
                //label.setBackground(Color.decode("#194C7F"));
                label.setForeground(Color.decode("#000080"));
                jContentPanel.add(label);
                jContentPanel.add(Box.createHorizontalStrut(5));
                PropertyPanel p = new PropertyPanel(attr.getPropertySupport());
                p.setOpaque(false);

                jContentPanel.add(p);
                jContentPanel.add(Box.createHorizontalStrut(5));
            }
        }

        setVisible(true);
    }

    @Override
    public void paintComponent(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;

        GradientPaint gradient = new GradientPaint(0, 0, Color.WHITE, 0, 90, Color.decode("#E0E8F1"));
        g2d.setPaint(gradient);

        g2d.fillRect(0, 0, getWidth(), getHeight());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jHeaderTitle = new javax.swing.JLabel();
        jContentPanel = new javax.swing.JPanel();
        jButtonsPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();

        setAlignmentX(0.0F);
        setAlignmentY(0.0F);

        jHeaderTitle.setFont(new java.awt.Font("Tahoma", 1, 14));
        jHeaderTitle.setForeground(new java.awt.Color(25, 76, 127));
        jHeaderTitle.setText(org.openide.util.NbBundle.getMessage(RtcWorkItemHeaderLayout.class, "RtcWorkItemHeaderLayout.jHeaderTitle.text")); // NOI18N

        jContentPanel.setLayout(new javax.swing.BoxLayout(jContentPanel, javax.swing.BoxLayout.LINE_AXIS));

        jButtonsPanel.setOpaque(false);
        jButtonsPanel.setLayout(new javax.swing.BoxLayout(jButtonsPanel, javax.swing.BoxLayout.LINE_AXIS));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl/edu/amu/wmi/kino/rtc/client/workitems/panels/refresh_co.gif"))); // NOI18N
        jButton1.setText(org.openide.util.NbBundle.getMessage(RtcWorkItemHeaderLayout.class, "RtcWorkItemHeaderLayout.jButton1.text")); // NOI18N
        jButton1.setAlignmentX(1.0F);
        jButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButtonsPanel.add(jButton1);

        SaveButton.setText(org.openide.util.NbBundle.getMessage(RtcWorkItemHeaderLayout.class, "RtcWorkItemHeaderLayout.SaveButton.text")); // NOI18N
        SaveButton.setAlignmentX(1.0F);
        SaveButton.setEnabled(false);
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        jButtonsPanel.add(SaveButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jContentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jHeaderTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 398, Short.MAX_VALUE)
                        .addComponent(jButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jHeaderTitle)
                    .addComponent(jButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jContentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        SaveCookie cookie = context.lookup(SaveCookie.class);
        try {
            cookie.save();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        context.lookup(WorkItemNode.class).refresh();
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jButtonsPanel;
    private javax.swing.JPanel jContentPanel;
    private javax.swing.JLabel jHeaderTitle;
    // End of variables declaration//GEN-END:variables

    @Override
    public HelpCtx getHelpCtx() {
        return new HelpCtx(RtcWorkItemHeaderLayout.class);
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Lookup.Result r = (Lookup.Result) ev.getSource();

        if (r.allInstances().isEmpty()) {
            SaveButton.setEnabled(false);
            // very bad solution.. i should use listeners in top component...
            tp.workItemSaved();
        } else {
            SaveButton.setEnabled(true);
            tp.workItemModified();
        }
    }

    @Override
    public void eventFired(TopComponentEvents eventType) {
        results.removeLookupListener(this);
        results = null;
    }
}
